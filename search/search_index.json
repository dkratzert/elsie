{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Elsie # Elsie allows you to create slides programmatically using Python. Elsie is a Python library that lets you build SVG slides in a composable way and then render them to PDF. There is no DSL or GUI \u2013 presentations created with elsie are fully programmed with Python! Hello world # import elsie, getpass @elsie.slide() def hello_world(slide): slide.text(f\"Hello world from {getpass.getuser()}!\") elsie.render(\"slides.pdf\") Features # Fully programmable presentations! No more annoying clicking or manually going through hundreds of slides just to change the font \u2013 change a single line of code and regenerate your whole presentation with a single command. Noticed a typo that spans all slides a moment before your big talk begins? Just fix it and recreate the whole presentation within seconds! Experience the power of Turing-complete presentations. Automatic layout Elsie provides a simple yet powerful layout model that can automatically layout anything. Need rows? Columns? Grids? Padding? Aligned text? Relative positioning? Automatic scaling? We got you covered. Oh, you want to draw a 64x32 image at the coordinates (x=105, y=42) ? You can do that too! Animations and fragments Reveal your slides gradually using fragments or create custom step-by-step animations using Python code. Or draw a fine-tuned SVG image by hand in Inkscape and let Elsie turn it into an animation using a handy layer-naming convention . Source code highlighting Enjoy automatic source code highlighting . Create code walkthroughs using individual line highlighting or arrows pointing to specific code elements. Batteries included Leverage familiar SVG features - fonts, colors, dashed line borders, you name it. Include PNG/JPG/SVG images directly into your slides. Render LaTex into your slides. Debug your slides interactively in Jupyter notebooks . Familiarity At its heart, Elsie is an API for creating SVG images, optimized for making slides. If you know basics of Python and SVG, you'll be right at home. Every tool has its disadvantages though. Elsie provides a rather low level API. While that means that you can create a slide in any way you like, on the other hand you also sometimes have to do some extra work to achieve results that are trivial in e.g. Powerpoint. TODO: lists Elsie produces PDF slides, so it can only create animations with a single frame per slide. If you need 60 FPS animations or GIFs, you will be better off with e.g. PowerPoint. Currently, Elsie renders SVG slides to PDF using Inkscape . Therefore you must have it installed on your system for it to work. We provide a Docker image with Inkscape for convenience. It will probably only work on Linux. How does it work? # TOOD: Inkscape, queries, pillow, etc.","title":"Overview"},{"location":"#elsie","text":"Elsie allows you to create slides programmatically using Python. Elsie is a Python library that lets you build SVG slides in a composable way and then render them to PDF. There is no DSL or GUI \u2013 presentations created with elsie are fully programmed with Python!","title":"Elsie"},{"location":"#hello-world","text":"import elsie, getpass @elsie.slide() def hello_world(slide): slide.text(f\"Hello world from {getpass.getuser()}!\") elsie.render(\"slides.pdf\")","title":"Hello world"},{"location":"#features","text":"Fully programmable presentations! No more annoying clicking or manually going through hundreds of slides just to change the font \u2013 change a single line of code and regenerate your whole presentation with a single command. Noticed a typo that spans all slides a moment before your big talk begins? Just fix it and recreate the whole presentation within seconds! Experience the power of Turing-complete presentations. Automatic layout Elsie provides a simple yet powerful layout model that can automatically layout anything. Need rows? Columns? Grids? Padding? Aligned text? Relative positioning? Automatic scaling? We got you covered. Oh, you want to draw a 64x32 image at the coordinates (x=105, y=42) ? You can do that too! Animations and fragments Reveal your slides gradually using fragments or create custom step-by-step animations using Python code. Or draw a fine-tuned SVG image by hand in Inkscape and let Elsie turn it into an animation using a handy layer-naming convention . Source code highlighting Enjoy automatic source code highlighting . Create code walkthroughs using individual line highlighting or arrows pointing to specific code elements. Batteries included Leverage familiar SVG features - fonts, colors, dashed line borders, you name it. Include PNG/JPG/SVG images directly into your slides. Render LaTex into your slides. Debug your slides interactively in Jupyter notebooks . Familiarity At its heart, Elsie is an API for creating SVG images, optimized for making slides. If you know basics of Python and SVG, you'll be right at home. Every tool has its disadvantages though. Elsie provides a rather low level API. While that means that you can create a slide in any way you like, on the other hand you also sometimes have to do some extra work to achieve results that are trivial in e.g. Powerpoint. TODO: lists Elsie produces PDF slides, so it can only create animations with a single frame per slide. If you need 60 FPS animations or GIFs, you will be better off with e.g. PowerPoint. Currently, Elsie renders SVG slides to PDF using Inkscape . Therefore you must have it installed on your system for it to work. We provide a Docker image with Inkscape for convenience. It will probably only work on Linux.","title":"Features"},{"location":"#how-does-it-work","text":"TOOD: Inkscape, queries, pillow, etc.","title":"How does it work?"},{"location":"examples/","text":"Examples # TODO: link to repository examples TODO: real-life examples","title":"Examples"},{"location":"examples/#examples","text":"TODO: link to repository examples TODO: real-life examples","title":"Examples"},{"location":"getting_started/","text":"Getting started # Want to reuse some slide multiple times, with slight variants? Create a function and parametrize it. Need to use the same font or color at multiple places, but you're not sure about its final value? Just create a variable and change it at any time!","title":"Getting started"},{"location":"getting_started/#getting-started","text":"Want to reuse some slide multiple times, with slight variants? Create a function and parametrize it. Need to use the same font or color at multiple places, but you're not sure about its final value? Just create a variable and change it at any time!","title":"Getting started"},{"location":"installation/","text":"Installation # Requirements # Python 3.6+ Inkscape 0.92+ (1.0+ recommended) (Required only LaTeX support): pdflatex, pdf2svg Native installation # You can install Elsie using PyPi : $ pip3 install elsie Elsie requires Python 3.4+. You will also need Inkscape installed, preferably version 1.0+. You can find how to install Inkscape here . On Ubuntu you can simply execute $ apt-get install inkscape Docker installation # We also provide a Docker image that has Inkscape and all required Python dependencies installed. First build the image: $ docker build -t elsie . After that you can use it to render your slides. Let's assume that you have a file called slides.py in the current directory and you want to render it into PDF. You can do that with the following command: $ docker run --rm \\ -u $(id -u ${USER}):$(id -g ${USER}) \\ -v${PWD}:/slides \\ elsie python3 /slides/slides.py The slides should then appear in your current directory (by default in slides.pdf ).","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#requirements","text":"Python 3.6+ Inkscape 0.92+ (1.0+ recommended) (Required only LaTeX support): pdflatex, pdf2svg","title":"Requirements"},{"location":"installation/#native-installation","text":"You can install Elsie using PyPi : $ pip3 install elsie Elsie requires Python 3.4+. You will also need Inkscape installed, preferably version 1.0+. You can find how to install Inkscape here . On Ubuntu you can simply execute $ apt-get install inkscape","title":"Native installation"},{"location":"installation/#docker-installation","text":"We also provide a Docker image that has Inkscape and all required Python dependencies installed. First build the image: $ docker build -t elsie . After that you can use it to render your slides. Let's assume that you have a file called slides.py in the current directory and you want to render it into PDF. You can do that with the following command: $ docker run --rm \\ -u $(id -u ${USER}):$(id -g ${USER}) \\ -v${PWD}:/slides \\ elsie python3 /slides/slides.py The slides should then appear in your current directory (by default in slides.pdf ).","title":"Docker installation"},{"location":"userguide/boxes/","text":"Boxes #","title":"Boxes"},{"location":"userguide/boxes/#boxes","text":"","title":"Boxes"}]}